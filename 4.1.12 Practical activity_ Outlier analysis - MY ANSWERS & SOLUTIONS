{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "dbf2df27",
   "metadata": {},
   "source": [
    "   # 4.1.12 Practical activity: Outlier analysis - MY ANSWERS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b21872c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Scenario \n",
    "\n",
    "#Canopy is a new boutique streaming company that is looking to create an app that provides recommendations based on the \n",
    "#last movie you watched. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1676e995",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Objective\n",
    "\n",
    "#You have access to the data sets movies.csv and ott.xlsx from Canopy. Based on the available information, in this \n",
    "#activity, you will:\n",
    "    #perform an outlier analysis on the data to detect outliers or anomalies and \n",
    "    #find interesting relationships among the variables\n",
    "    #understand what the data says by visualising it with a boxplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "bf9154ef",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(16744, 11)\n",
      "(16744, 5)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Year</th>\n",
       "      <th>Age</th>\n",
       "      <th>IMDb</th>\n",
       "      <th>Rotten Tomatoes</th>\n",
       "      <th>Directors</th>\n",
       "      <th>Genres</th>\n",
       "      <th>Country</th>\n",
       "      <th>Language</th>\n",
       "      <th>Runtime</th>\n",
       "      <th>Netflix</th>\n",
       "      <th>Hulu</th>\n",
       "      <th>Prime Video</th>\n",
       "      <th>Disney+</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Inception</td>\n",
       "      <td>2010</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>87%</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>Action,Adventure,Sci-Fi,Thriller</td>\n",
       "      <td>United States,United Kingdom</td>\n",
       "      <td>English,Japanese,French</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>The Matrix</td>\n",
       "      <td>1999</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.7</td>\n",
       "      <td>87%</td>\n",
       "      <td>Lana Wachowski,Lilly Wachowski</td>\n",
       "      <td>Action,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>136.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>2018</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>84%</td>\n",
       "      <td>Anthony Russo,Joe Russo</td>\n",
       "      <td>Action,Adventure,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>149.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Back to the Future</td>\n",
       "      <td>1985</td>\n",
       "      <td>7+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>96%</td>\n",
       "      <td>Robert Zemeckis</td>\n",
       "      <td>Adventure,Comedy,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>116.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>The Good, the Bad and the Ugly</td>\n",
       "      <td>1966</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>97%</td>\n",
       "      <td>Sergio Leone</td>\n",
       "      <td>Western</td>\n",
       "      <td>Italy,Spain,West Germany</td>\n",
       "      <td>Italian</td>\n",
       "      <td>161.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16739</th>\n",
       "      <td>16740</td>\n",
       "      <td>The Ghosts of Buxley Hall</td>\n",
       "      <td>1980</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Bruce Bilson</td>\n",
       "      <td>Comedy,Family,Fantasy,Horror</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>120.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16740</th>\n",
       "      <td>16741</td>\n",
       "      <td>The Poof Point</td>\n",
       "      <td>2001</td>\n",
       "      <td>7+</td>\n",
       "      <td>4.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Neal Israel</td>\n",
       "      <td>Comedy,Family,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>90.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16741</th>\n",
       "      <td>16742</td>\n",
       "      <td>Sharks of Lost Island</td>\n",
       "      <td>2013</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Neil Gelinas</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16742</th>\n",
       "      <td>16743</td>\n",
       "      <td>Man Among Cheetahs</td>\n",
       "      <td>2017</td>\n",
       "      <td>NaN</td>\n",
       "      <td>6.6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Richard Slater-Jones</td>\n",
       "      <td>Documentary</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16743</th>\n",
       "      <td>16744</td>\n",
       "      <td>In Beaver Valley</td>\n",
       "      <td>1950</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>James Algar</td>\n",
       "      <td>Documentary,Short,Family</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>32.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16744 rows Ã— 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID                           Title  Year  Age  IMDb Rotten Tomatoes  \\\n",
       "0          1                       Inception  2010  13+   8.8             87%   \n",
       "1          2                      The Matrix  1999  18+   8.7             87%   \n",
       "2          3          Avengers: Infinity War  2018  13+   8.5             84%   \n",
       "3          4              Back to the Future  1985   7+   8.5             96%   \n",
       "4          5  The Good, the Bad and the Ugly  1966  18+   8.8             97%   \n",
       "...      ...                             ...   ...  ...   ...             ...   \n",
       "16739  16740       The Ghosts of Buxley Hall  1980  NaN   6.2             NaN   \n",
       "16740  16741                  The Poof Point  2001   7+   4.7             NaN   \n",
       "16741  16742           Sharks of Lost Island  2013  NaN   5.7             NaN   \n",
       "16742  16743              Man Among Cheetahs  2017  NaN   6.6             NaN   \n",
       "16743  16744                In Beaver Valley  1950  NaN   NaN             NaN   \n",
       "\n",
       "                            Directors                            Genres  \\\n",
       "0                   Christopher Nolan  Action,Adventure,Sci-Fi,Thriller   \n",
       "1      Lana Wachowski,Lilly Wachowski                     Action,Sci-Fi   \n",
       "2             Anthony Russo,Joe Russo           Action,Adventure,Sci-Fi   \n",
       "3                     Robert Zemeckis           Adventure,Comedy,Sci-Fi   \n",
       "4                        Sergio Leone                           Western   \n",
       "...                               ...                               ...   \n",
       "16739                    Bruce Bilson      Comedy,Family,Fantasy,Horror   \n",
       "16740                     Neal Israel              Comedy,Family,Sci-Fi   \n",
       "16741                    Neil Gelinas                       Documentary   \n",
       "16742            Richard Slater-Jones                       Documentary   \n",
       "16743                     James Algar          Documentary,Short,Family   \n",
       "\n",
       "                            Country                 Language  Runtime  \\\n",
       "0      United States,United Kingdom  English,Japanese,French    148.0   \n",
       "1                     United States                  English    136.0   \n",
       "2                     United States                  English    149.0   \n",
       "3                     United States                  English    116.0   \n",
       "4          Italy,Spain,West Germany                  Italian    161.0   \n",
       "...                             ...                      ...      ...   \n",
       "16739                 United States                  English    120.0   \n",
       "16740                 United States                  English     90.0   \n",
       "16741                 United States                  English      NaN   \n",
       "16742                 United States                  English      NaN   \n",
       "16743                 United States                  English     32.0   \n",
       "\n",
       "       Netflix  Hulu  Prime Video  Disney+  \n",
       "0            0     0            1        0  \n",
       "1            0     1            0        0  \n",
       "2            0     0            1        0  \n",
       "3            1     0            0        0  \n",
       "4            0     0            1        0  \n",
       "...        ...   ...          ...      ...  \n",
       "16739        0     0            1        0  \n",
       "16740        0     0            1        0  \n",
       "16741        0     0            1        0  \n",
       "16742        0     0            1        0  \n",
       "16743        1     0            0        0  \n",
       "\n",
       "[16744 rows x 15 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Trying without prompts\n",
    "\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "movies = pd.read_csv(\"movies.csv\")\n",
    "ott = pd.read_excel(\"ott.xlsx\")\n",
    "\n",
    "movies_ott= pd.merge(movies,ott, how='left',on=\"ID\")\n",
    "\n",
    "print(movies.shape)\n",
    "print(ott.shape)\n",
    "\n",
    "movies_ott"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "dbe4a81d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Year', ylabel='IMDb'>"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data=movies_ott,x=\"Year\",y=\"IMDb\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "155a56a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#objective is too broad to dcipher...will use prompts for now"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "eb83983c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Approach\n",
    "\n",
    "#Open a new Jupyter Notebook or continue with the same Notebook from the previous activity to reduce the repetition of \n",
    "#importing the packages and creating DataFrames. Ensure you:\n",
    "    #Imported the necessary libraries.\n",
    "    #Loaded the data sets and create DataFrames using Pandas.\n",
    "    #Viewed and validated the DataFrames.\n",
    "    #Merged the two DataFrames into one DataFrame.\n",
    "    \n",
    "#Plot a boxplot to display the outliers when comparing the user age and their IMDb ratings for the movies. Based on the plot, answer the following questions: \n",
    "#    What can you infer from the outliers of the ratings data given by different age groups?\n",
    "#    How can you improve the quality of the figure?\n",
    "\n",
    "#Save the Notebook to your Github repository by uploading and committing any changes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "8cadfd9e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age', ylabel='IMDb'>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot a boxplot to display the outliers when comparing the user age and their IMDb ratings for the movies. \n",
    "#Based on the plot, answer the following questions: \n",
    "#    What can you infer from the outliers of the ratings data given by different age groups?\n",
    "#    How can you improve the quality of the figure?\n",
    "\n",
    "sns.boxplot(data=movies_ott,x=\"Age\",y=\"IMDb\")\n",
    "\n",
    "#    What can you infer from the outliers of the ratings data given by different age groups?\n",
    "# There are a lot movies with very low ratings in the \"all\",\"13+\" and \"7+\" age groups\n",
    "#A lot of bad movies in these categories. Perhaps the age rating wasn't even appropriate for these movies.\n",
    "#IMDb needs to recheck the outlier movies for appropriate age ratings and why their ratings were so low.\n",
    "\n",
    "#    How can you improve the quality of the figure?\n",
    "# By removing said outliers?\n",
    "# By adding other segregations / a thir variable in hue?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80a6efca",
   "metadata": {},
   "source": [
    "# LSE's ANSWERS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "6e94e16e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import necessary libraries.\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "6312b89e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ID', 'Netflix', 'Hulu', 'Prime Video', 'Disney+'], dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Load the Excel data using pd.read_excel.\n",
    "ott = pd.read_excel('ott.xlsx')\n",
    "\n",
    "# View the columns.\n",
    "print(ott.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8d1b1f8e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ID', 'Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Directors',\n",
      "       'Genres', 'Country', 'Language', 'Runtime'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# Load the CSV data using pd.read_csv.\n",
    "movies = pd.read_csv(\"movies.csv\")\n",
    "\n",
    "print(movies.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "66a7a75b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID                           Title  Year  Age  IMDb Rotten Tomatoes  \\\n",
      "0   1                       Inception  2010  13+   8.8             87%   \n",
      "1   2                      The Matrix  1999  18+   8.7             87%   \n",
      "2   3          Avengers: Infinity War  2018  13+   8.5             84%   \n",
      "3   4              Back to the Future  1985   7+   8.5             96%   \n",
      "4   5  The Good, the Bad and the Ugly  1966  18+   8.8             97%   \n",
      "\n",
      "                        Directors                            Genres  \\\n",
      "0               Christopher Nolan  Action,Adventure,Sci-Fi,Thriller   \n",
      "1  Lana Wachowski,Lilly Wachowski                     Action,Sci-Fi   \n",
      "2         Anthony Russo,Joe Russo           Action,Adventure,Sci-Fi   \n",
      "3                 Robert Zemeckis           Adventure,Comedy,Sci-Fi   \n",
      "4                    Sergio Leone                           Western   \n",
      "\n",
      "                        Country                 Language  Runtime  \n",
      "0  United States,United Kingdom  English,Japanese,French    148.0  \n",
      "1                 United States                  English    136.0  \n",
      "2                 United States                  English    149.0  \n",
      "3                 United States                  English    116.0  \n",
      "4      Italy,Spain,West Germany                  Italian    161.0  \n",
      "(16744, 11)\n",
      "ID                   int64\n",
      "Title               object\n",
      "Year                 int64\n",
      "Age                 object\n",
      "IMDb               float64\n",
      "Rotten Tomatoes     object\n",
      "Directors           object\n",
      "Genres              object\n",
      "Country             object\n",
      "Language            object\n",
      "Runtime            float64\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Data imported correctly?\n",
    "print(movies.head())\n",
    "print(movies.shape)\n",
    "print(movies.dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "604fc779",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   ID  Netflix  Hulu  Prime Video  Disney+\n",
      "0   1        0     0            1        0\n",
      "1   2        0     1            0        0\n",
      "2   3        0     0            1        0\n",
      "3   4        1     0            0        0\n",
      "4   5        0     0            1        0\n",
      "ID             int64\n",
      "Netflix        int64\n",
      "Hulu           int64\n",
      "Prime Video    int64\n",
      "Disney+        int64\n",
      "dtype: object\n",
      "(16744, 5)\n"
     ]
    }
   ],
   "source": [
    "# Data imported correctly?\n",
    "print(ott.head())\n",
    "print(ott.dtypes)\n",
    "print(ott.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "99ea444d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(16744, 15)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Title</th>\n",
       "      <th>Year</th>\n",
       "      <th>Age</th>\n",
       "      <th>IMDb</th>\n",
       "      <th>Rotten Tomatoes</th>\n",
       "      <th>Directors</th>\n",
       "      <th>Genres</th>\n",
       "      <th>Country</th>\n",
       "      <th>Language</th>\n",
       "      <th>Runtime</th>\n",
       "      <th>Netflix</th>\n",
       "      <th>Hulu</th>\n",
       "      <th>Prime Video</th>\n",
       "      <th>Disney+</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Inception</td>\n",
       "      <td>2010</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>87%</td>\n",
       "      <td>Christopher Nolan</td>\n",
       "      <td>Action,Adventure,Sci-Fi,Thriller</td>\n",
       "      <td>United States,United Kingdom</td>\n",
       "      <td>English,Japanese,French</td>\n",
       "      <td>148.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>The Matrix</td>\n",
       "      <td>1999</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.7</td>\n",
       "      <td>87%</td>\n",
       "      <td>Lana Wachowski,Lilly Wachowski</td>\n",
       "      <td>Action,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>136.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Avengers: Infinity War</td>\n",
       "      <td>2018</td>\n",
       "      <td>13+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>84%</td>\n",
       "      <td>Anthony Russo,Joe Russo</td>\n",
       "      <td>Action,Adventure,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>149.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Back to the Future</td>\n",
       "      <td>1985</td>\n",
       "      <td>7+</td>\n",
       "      <td>8.5</td>\n",
       "      <td>96%</td>\n",
       "      <td>Robert Zemeckis</td>\n",
       "      <td>Adventure,Comedy,Sci-Fi</td>\n",
       "      <td>United States</td>\n",
       "      <td>English</td>\n",
       "      <td>116.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>The Good, the Bad and the Ugly</td>\n",
       "      <td>1966</td>\n",
       "      <td>18+</td>\n",
       "      <td>8.8</td>\n",
       "      <td>97%</td>\n",
       "      <td>Sergio Leone</td>\n",
       "      <td>Western</td>\n",
       "      <td>Italy,Spain,West Germany</td>\n",
       "      <td>Italian</td>\n",
       "      <td>161.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID                           Title  Year  Age  IMDb Rotten Tomatoes  \\\n",
       "0   1                       Inception  2010  13+   8.8             87%   \n",
       "1   2                      The Matrix  1999  18+   8.7             87%   \n",
       "2   3          Avengers: Infinity War  2018  13+   8.5             84%   \n",
       "3   4              Back to the Future  1985   7+   8.5             96%   \n",
       "4   5  The Good, the Bad and the Ugly  1966  18+   8.8             97%   \n",
       "\n",
       "                        Directors                            Genres  \\\n",
       "0               Christopher Nolan  Action,Adventure,Sci-Fi,Thriller   \n",
       "1  Lana Wachowski,Lilly Wachowski                     Action,Sci-Fi   \n",
       "2         Anthony Russo,Joe Russo           Action,Adventure,Sci-Fi   \n",
       "3                 Robert Zemeckis           Adventure,Comedy,Sci-Fi   \n",
       "4                    Sergio Leone                           Western   \n",
       "\n",
       "                        Country                 Language  Runtime  Netflix  \\\n",
       "0  United States,United Kingdom  English,Japanese,French    148.0        0   \n",
       "1                 United States                  English    136.0        0   \n",
       "2                 United States                  English    149.0        0   \n",
       "3                 United States                  English    116.0        1   \n",
       "4      Italy,Spain,West Germany                  Italian    161.0        0   \n",
       "\n",
       "   Hulu  Prime Video  Disney+  \n",
       "0     0            1        0  \n",
       "1     1            0        0  \n",
       "2     0            1        0  \n",
       "3     0            0        0  \n",
       "4     0            1        0  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Merge the two DataFrames.\n",
    "mov_ott = pd.merge(movies, ott, how='left', on = 'ID')\n",
    "\n",
    "# View the DataFrame.\n",
    "print(mov_ott.shape)\n",
    "mov_ott.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6fb8e1de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age', ylabel='IMDb'>"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create boxplot with two variables (Age and IMDb).\n",
    "sns.boxplot(x='Age', y='IMDb', data=mov_ott)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c54d47b0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Quick recap 2.2.5...or sth... yes it depends on the keys / name of the columns you put in the data\n",
    "#they need to be defined the EXACT same way otherwise the dataframe returns NaN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "5e9e05ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Annual</th>\n",
       "      <th>Sick</th>\n",
       "      <th>Personal</th>\n",
       "      <th>Bonus</th>\n",
       "      <th>Total_leave_taken</th>\n",
       "      <th>total_leave_available</th>\n",
       "      <th>annual_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personnel ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>Shen Lee</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Leon Buhle</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>Tracy Adams</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>Lebo Sinuka</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>Lauren Pierce</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>Monika Bond</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>Natahs Allsop</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Nicholas Winter</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>Christopher Eckson</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>Siobhan OMalley</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>33</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Name  Annual  Sick  Personal  Bonus  \\\n",
       "Personnel ID                                                      \n",
       "215                     Shen Lee       0     0         5      3   \n",
       "216                   Leon Buhle       0     2         0      0   \n",
       "217                  Tracy Adams       5     0         1      0   \n",
       "218                  Lebo Sinuka       4     1         0      3   \n",
       "219                Lauren Pierce       2     3         5      3   \n",
       "220                  Monika Bond       5     0         0      6   \n",
       "221                Natahs Allsop      10     1         3      0   \n",
       "222              Nicholas Winter       8     0         0      3   \n",
       "223           Christopher Eckson      10     2         1      3   \n",
       "224              Siobhan OMalley       0     5         3      3   \n",
       "\n",
       "             Total_leave_taken  total_leave_available  annual_total  \n",
       "Personnel ID                                                         \n",
       "215                        NaN                     38            38  \n",
       "216                        NaN                     32            35  \n",
       "217                        NaN                     30            35  \n",
       "218                        NaN                     28            38  \n",
       "219                        NaN                     33            38  \n",
       "220                        NaN                     33            41  \n",
       "221                        NaN                     24            35  \n",
       "222                        NaN                     29            38  \n",
       "223                        NaN                     23            38  \n",
       "224                        NaN                     33            38  "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HR_directory = {'Name': ['Shen Lee','Leon Buhle','Tracy Adams',\n",
    "                'Lebo Sinuka','Lauren Pierce','Monika Bond',\n",
    "                'Natahs Allsop','Nicholas Winter','Christopher Eckson',\n",
    "                'Siobhan OMalley'],\n",
    "                'Annual': [0,0,5,4,2,5,10,8,10,0],\n",
    "                'Sick': [0,2,0,1,3,0,1,0,2,5],\n",
    "                'Personal': [5,0,1,0,5,0,3,0,1,3],\n",
    "                'Bonus': [3,0,0,3,3,6,0,3,3,3],\n",
    "                'total_leave_taken': [0,3,5,19,5,8,11,9,15,5],\n",
    "                'total_leave_available': [38,32,30,28,33,33,24,29,23,33],\n",
    "                'annual_total': [38,35,35,38,38,41,35,38,38,38]}\n",
    "\n",
    "row_labels = [215,216,217,218,219,220,221,222,223,224]\n",
    "\n",
    "leave_cycle = pd.DataFrame(HR_directory,\n",
    "                           columns=['Name','Annual','Sick',\n",
    "                                    'Personal','Bonus','Total_leave_taken',\n",
    "                                    'total_leave_available','annual_total'],\n",
    "                            index = row_labels)\n",
    "leave_cycle.index.name = 'Personnel ID'\n",
    "leave_cycle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "723f50d2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Annual</th>\n",
       "      <th>Sick</th>\n",
       "      <th>Personal</th>\n",
       "      <th>Bonus</th>\n",
       "      <th>total_leave_taken</th>\n",
       "      <th>total_leave_available</th>\n",
       "      <th>annual_total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personnel ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>Shen Lee</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Leon Buhle</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>Tracy Adams</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>Lebo Sinuka</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "      <td>28</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>Lauren Pierce</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>33</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>Monika Bond</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>33</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>Natahs Allsop</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Nicholas Winter</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>29</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>Christopher Eckson</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>23</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>Siobhan OMalley</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>33</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Name  Annual  Sick  Personal  Bonus  \\\n",
       "Personnel ID                                                      \n",
       "215                     Shen Lee       0     0         5      3   \n",
       "216                   Leon Buhle       0     2         0      0   \n",
       "217                  Tracy Adams       5     0         1      0   \n",
       "218                  Lebo Sinuka       4     1         0      3   \n",
       "219                Lauren Pierce       2     3         5      3   \n",
       "220                  Monika Bond       5     0         0      6   \n",
       "221                Natahs Allsop      10     1         3      0   \n",
       "222              Nicholas Winter       8     0         0      3   \n",
       "223           Christopher Eckson      10     2         1      3   \n",
       "224              Siobhan OMalley       0     5         3      3   \n",
       "\n",
       "              total_leave_taken  total_leave_available  annual_total  \n",
       "Personnel ID                                                          \n",
       "215                           0                     38            38  \n",
       "216                           3                     32            35  \n",
       "217                           5                     30            35  \n",
       "218                          19                     28            38  \n",
       "219                           5                     33            38  \n",
       "220                           8                     33            41  \n",
       "221                          11                     24            35  \n",
       "222                           9                     29            38  \n",
       "223                          15                     23            38  \n",
       "224                           5                     33            38  "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = {'Name': ['Shen Lee','Leon Buhle','Tracy Adams',\n",
    "'Lebo Sinuka','Lauren Pierce','Monika Bond',\n",
    "'Natahs Allsop','Nicholas Winter','Christopher Eckson',\n",
    "'Siobhan OMalley'],\n",
    "'Annual': [0,0,5,4,2,5,10,8,10,0],\n",
    "'Sick': [0,2,0,1,3,0,1,0,2,5],\n",
    "'Personal': [5,0,1,0,5,0,3,0,1,3],\n",
    "'Bonus': [3,0,0,3,3,6,0,3,3,3],\n",
    "'total_leave_taken':[0,3,5,19,5,8,11,9,15,5],\n",
    "'total_leave_available':[38,32,30,28,33,33,24,29,23,33],\n",
    "'annual_total':[38,35,35,38,38,41,35,38,38,38]}\n",
    "\n",
    "row_labels = [215,216,217,218,219,220,221,222,223,224]\n",
    "\n",
    "leave_cycle = pd.DataFrame(data,columns=['Name','Annual','Sick',\n",
    "'Personal','Bonus','total_leave_taken',\n",
    "'total_leave_available','annual_total'], index = row_labels)\n",
    "\n",
    "leave_cycle.index.name = 'Personnel ID'\n",
    "\n",
    "leave_cycle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "06df1cb8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Name</th>\n",
       "      <th>Annual</th>\n",
       "      <th>Sick</th>\n",
       "      <th>Personal</th>\n",
       "      <th>Bonus</th>\n",
       "      <th>Total Leave taken</th>\n",
       "      <th>Total Leave Available</th>\n",
       "      <th>Annual Total</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Personnel ID</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>215</th>\n",
       "      <td>Shen Lee</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>38</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>Leon Buhle</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>32</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>Tracy Adams</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>30</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>Lebo Sinuka</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>19</td>\n",
       "      <td>28</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>Lauren Pierce</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>33</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>Monika Bond</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>33</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>221</th>\n",
       "      <td>Natahs Allsop</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "      <td>24</td>\n",
       "      <td>35</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>222</th>\n",
       "      <td>Nicholas Winter</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>29</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>223</th>\n",
       "      <td>Christopher Eckson</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>23</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>224</th>\n",
       "      <td>Siobhan OMalley</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>33</td>\n",
       "      <td>38</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Name  Annual  Sick  Personal  Bonus  \\\n",
       "Personnel ID                                                      \n",
       "215                     Shen Lee       0     0         5      3   \n",
       "216                   Leon Buhle       0     2         0      0   \n",
       "217                  Tracy Adams       5     0         1      0   \n",
       "218                  Lebo Sinuka       4     1         0      3   \n",
       "219                Lauren Pierce       2     3         5      3   \n",
       "220                  Monika Bond       5     0         0      6   \n",
       "221                Natahs Allsop      10     1         3      0   \n",
       "222              Nicholas Winter       8     0         0      3   \n",
       "223           Christopher Eckson      10     2         1      3   \n",
       "224              Siobhan OMalley       0     5         3      3   \n",
       "\n",
       "              Total Leave taken  Total Leave Available  Annual Total  \n",
       "Personnel ID                                                          \n",
       "215                           0                     38            38  \n",
       "216                           3                     32            35  \n",
       "217                           5                     30            35  \n",
       "218                          19                     28            38  \n",
       "219                           5                     33            38  \n",
       "220                           8                     33            41  \n",
       "221                          11                     24            35  \n",
       "222                           9                     29            38  \n",
       "223                          15                     23            38  \n",
       "224                           5                     33            38  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "HR_directory = {'Name': ['Shen Lee','Leon Buhle','Tracy Adams',\n",
    "'Lebo Sinuka','Lauren Pierce','Monika Bond',\n",
    "'Natahs Allsop','Nicholas Winter','Christopher Eckson',\n",
    "'Siobhan OMalley'],\n",
    "'Annual': [0,0,5,4,2,5,10,8,10,0],\n",
    "'Sick': [0,2,0,1,3,0,1,0,2,5],\n",
    "'Personal': [5,0,1,0,5,0,3,0,1,3],\n",
    "'Bonus': [3,0,0,3,3,6,0,3,3,3],\n",
    "'Total Leave taken': [0,3,5,19,5,8,11,9,15,5],\n",
    "'Total Leave Available': [38,32,30,28,33,33,24,29,23,33],\n",
    "'Annual Total': [38,35,35,38,38,41,35,38,38,38]}\n",
    "row_labels = [215,216,217,218,219,220,221,222,223,224]\n",
    "leave_cycle = pd.DataFrame(HR_directory,\n",
    "columns=['Name','Annual','Sick',\n",
    "'Personal','Bonus','Total Leave taken',\n",
    "'Total Leave Available','Annual Total'],\n",
    "index = row_labels)\n",
    "leave_cycle.index.name = 'Personnel ID'\n",
    "leave_cycle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cb4e56a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
